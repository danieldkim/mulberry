#!/usr/bin/env ruby
$: << File.expand_path('../..', __FILE__)

require 'mulberry'
require 'content_creator'
require 'code_creator'
require 'template_creator'

module Mulberry
  class CLI
    def run(args)
      if !args[0]
        puts "mulberry must be called with an action."
        return
      end

      action = args.shift
      filenames = args

      if [ 'scaffold', 'serve', 'deploy', 'test', 'data' ].include? action
        dir = (args[0] && File.expand_path(args[0]))

        if !dir && action == 'scaffold'
          raise "You must specify an app name" unless dir
        else
          dir ||= Dir.pwd
        end

        begin
          if action == 'scaffold' || dir_is_app?(dir)
            self.send(action, dir)
          else
            raise "You must specify a valid app."
          end
        rescue RuntimeError => e
          puts e
        end

        return
      end

      if action.match /^create_(.+)$/
        dir = Dir.pwd
        raise "You must run this command from inside a valid Mulberry app." unless dir_is_app?(dir)
        raise "You must specify a file to create." unless filenames.first

        default_creator = Mulberry::ContentCreator

        commands = {
          :page       => {},
          :feed       => {},
          :data       => {},
          :location   => {},

          :component  => {
            :creator  =>  Mulberry::CodeCreator
          },

          :template   => {
            :creator  =>  Mulberry::TemplateCreator
          },

          :capability => {
            :creator  =>  Mulberry::CodeCreator
          }
        }

        content_type = $~[1].to_sym
        raise "Don't know how to do #{action}" unless commands[content_type]
        command = commands[content_type]

        filenames.each { |f| (command[:creator] || default_creator).new(content_type.to_s, dir, f) }
      end
    end

    private
    def dir_is_app?(dir)
      File.exists?(dir) && File.exists?(File.join(dir, 'config.yml'))
    end

    def scaffold(dir)
      dir.gsub!(Dir.pwd + "/", "")
      Mulberry::App.scaffold(dir)
    end

    def serve(dir)
      begin
        app = Mulberry::App.new(dir)
        app.serve
      rescue ConfigError => ce
        puts "Configuration error: #{ce}"
      end
    end

    def deploy(dir)
      app = Mulberry::App.new(dir)
      app.generate
    end

    def test(dir)
      app = Mulberry::App.new(dir)
      app.generate(:test => true)
    end

    def data(dir)
      app = Mulberry::App.new(dir)
      d = JSON.pretty_generate(Mulberry::Data.new(app).generate)
      puts d
    end
  end
end

Mulberry::CLI.new.run(ARGV)
